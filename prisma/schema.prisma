datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum roles {
  BASIC
  ADMIN
}

enum budges {
  ROCKIE
  SILVER
  GOLDEN
  DIAMOND
  PLATINIUM
}

model User {
  id            String    @id @default(cuid())
  role          roles     @default(BASIC)
  name          String    @unique
  chessElo      String?   @default("600")
  badge         budges    @default(ROCKIE)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  score         Int       @default(600)
  followedBy    Follows[] @relation("following")
  following     Follows[] @relation("follower")
  accounts      Account[]
  sessions      Session[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
